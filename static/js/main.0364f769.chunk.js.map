{"version":3,"sources":["logo.svg","containers/Preview/Preview.js","containers/Editor/Editor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","marked","setOptions","breaks","renderer","Renderer","link","href","title","text","code","language","Preview","props","className","class","id","dangerouslySetInnerHTML","__html","input","Editor","value","onChange","handleChange","type","App","state","markdown","placeholder","bind","event","this","setState","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,2LCI3CC,IAAOC,WAAW,CAChBC,QAAQ,IAIV,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAO,mCAA4BF,EAA5B,aAAqCE,GAAS,QAEvDL,EAASM,KAAO,SAASA,EAAMC,GAC7B,MAAO,6BAA+BA,EAAW,IAAMD,EAAO,iBAIhE,IAUeE,EAVC,SAACC,GACb,OACI,yBAAKC,UAAU,qBAAqBC,MAAM,sBAC1C,yBAAKA,MAAM,mBACP,uCAER,yBAAKC,GAAG,UAAUC,wBAAyB,CAACC,OAAQjB,IAAOY,EAAMM,MAAO,CAAEf,SAAUA,OAJhF,MCNOgB,EAXO,SAACP,GAEL,OACA,yBAAKC,UAAW,aAAYC,MAAO,cAC/B,yBAAKD,UAAU,SAAQ,yDAEvB,8BAAUE,GAAI,SAAQD,MAAO,SAASM,MAAOR,EAAMM,MAAOG,SAAUT,EAAMU,aAAcC,KAAK,SAHjG,0BCGZC,E,YACL,WAAYZ,GAAQ,IAAD,8BAClB,4CAAMA,KACDa,MAAQ,CACZC,SAAUC,GAGX,EAAKL,aAAc,EAAKA,aAAaM,KAAlB,gBAND,E,0EAUCC,GACZC,KAAKC,SAAS,CACbL,SAAUG,EAAMG,OAAOZ,U,+BAMxB,OACC,6BACD,kBAAC,EAAD,CAAQE,aAAcQ,KAAKR,aAAcJ,MAAOY,KAAKL,MAAMC,WACxD,kBAAC,EAAD,CAASR,MAAOY,KAAKL,MAAMC,gB,GAtBrBO,aA4BdN,EAAW,+qCA+CAH,ICxEKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0364f769.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport'../styles/styles.css'\r\nimport marked from 'marked'\r\n\r\nmarked.setOptions({\r\n  breaks: true,\r\n});\r\n\r\n// INSERTS target=\"_blank\" INTO HREF TAGS (required for codepen links)\r\nconst renderer = new marked.Renderer();\r\nrenderer.link = function (href, title, text) {\r\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\r\n}\r\nrenderer.code = function(code, language) {\r\n  return '<pre><code class=language-' + language + '>' + code + '</code></pre>';\r\n}\r\n\r\n\r\nconst Preview = (props) => {\r\n    return (\r\n        <div className='previewPaneWrapper' class='previewPaneWrapper'>\r\n        <div class=\"previewPaneHead\">\r\n            <p>Preview</p>\r\n        </div>\r\n    <div id='preview' dangerouslySetInnerHTML={{__html: marked(props.input, { renderer: renderer })}} /> </div>\r\n    );\r\n}\r\n\r\nexport default Preview;","import React from 'react'\r\nimport '../styles/styles.css'\r\n\r\n        \tconst Editor=(props)=>{\r\n        \t\r\n        \t        \treturn (\r\n        \t        \t<div className =\"editorPane\"class =\"editorPane\">\r\n        \t            \t<div className='title'><p>HTML Markdown Preview App</p></div>\r\n                               {/* <Toolbar/>*/}\r\n        \t            \t<textarea id =\"editor\"class =\"editor\" value={props.input} onChange={props.handleChange} type=\"text\"/>        \t            </div>\r\n        \t        \t\t);\r\n        \t }  \r\n\r\n\r\nexport default Editor;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Preview from './containers/Preview/Preview'\nimport Editor from './containers/Editor/Editor'\n\n\n\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tmarkdown: placeholder\n\t\t};\n\t\t\n\t\tthis.handleChange= this.handleChange.bind(this)\n        }\n\n        \n        handleChange(event){\n        \tthis.setState({\n        \t\tmarkdown: event.target.value\n        \t})\n        }\n\n        \n        render() {\n        \treturn (\n        \t\t<div>\n        \t<Editor handleChange={this.handleChange} input={this.state.markdown}/>\n            <Preview input={this.state.markdown}/>\n            </div>\n        \t\t);\n    \t\t}\n}\n\nlet placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<inline style>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}